name: Docker Image CI

on:
  push:
    branches:
      - main
      - dev
    tags:
      - "v*.*.*"
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - dev


jobs:

  pull_request_checks:
    if: github.event_name == 'pull_request'

    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repo 
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check if required files exist
      run: |
        test -f ./frontend/package.json && echo "Frontend package.json exists"
        test -f ./frontend/Dockerfile && echo "Frontend Dockerfile exists"

    - name: Check conventional commit messages
      uses: amannn/action-semantic-pull-request@v5
      with:
          githubBaseUrl: https://api.github.com
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      backend1: ${{ steps.filter.outputs.backend1 }}
      backend2: ${{ steps.filter.outputs.backend2 }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend1:
              - 'backend1/**'
            backend2:
              - 'backend2/**'
            frontend:
              - 'frontend/**'

  semgrep_scan:
    needs: detect_changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Semgrep
        run: pip install semgrep

      - name: Set up Node.js (for semgrep-html)
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install semgrep-html
        run: npm install -g @returntocorp/semgrep-html

      - name: Create scan output directories
        run: |
          mkdir -p semgrep-reports/backend1
          mkdir -p semgrep-reports/backend2
          mkdir -p semgrep-reports/frontend

      - name: Run Semgrep on Backend1
        if: needs.detect_changes.outputs.backend1 == 'true'
        run: |
          semgrep --config auto --json --output semgrep-reports/backend1/report.json ./backend1
          semgrep-html -i semgrep-reports/backend1/report.json -o semgrep-reports/backend1/index.html

      - name: Run Semgrep on Backend2
        if: needs.detect_changes.outputs.backend2 == 'true'
        run: |
          semgrep --config auto --json --output semgrep-reports/backend2/report.json ./backend2
          semgrep-html -i semgrep-reports/backend2/report.json -o semgrep-reports/backend2/index.html

      - name: Run Semgrep on Frontend
        if: needs.detect_changes.outputs.frontend == 'true'
        run: |
          semgrep --config auto --json --output semgrep-reports/frontend/report.json ./frontend
          semgrep-html -i semgrep-reports/frontend/report.json -o semgrep-reports/frontend/index.html

      - name: Upload Semgrep reports
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-reports
          path: semgrep-reports


  upload_semgrep_reports:
    needs: semgrep_scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create scan directory
        run: mkdir -p gh-pages/scan

      - uses: actions/download-artifact@v4
        with:
          name: semgrep-reports
          path: artifacts
      
      - name: Copy semgrep reports
        run: |
          mkdir -p gh-pages/scan
          if [ -f artifacts/backend1/index.html ]; then
            mkdir -p gh-pages/scan/backend1
            cp artifacts/backend1/index.html gh-pages/scan/backend1/index.html
          fi
          if [ -f artifacts/backend2/index.html ]; then
            mkdir -p gh-pages/scan/backend2
            cp artifacts/backend2/index.html gh-pages/scan/backend2/index.html
          fi
          if [ -f artifacts/frontend/index.html ]; then
            mkdir -p gh-pages/scan/frontend
            cp artifacts/frontend/index.html gh-pages/scan/frontend/index.html
          fi
      - name: Commit and push Semgrep reports
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin reports || true
          git switch reports || git switch --orphan reports
          cp -r gh-pages/* .
          git add scan
          git commit -m "chore(report): update semgrep reports on ${{ github.sha }}" || echo "No changes"
          git push origin reports

  build_and_push_backend:
    needs: detect_changes
    if: needs.detect_changes.outputs.backend1 == 'true' || needs.detect_changes.outputs.backend2 == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'PRODUCTION' || 'DEVELOPMENT' }}
    outputs:
      docker_tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Get tag
        id: get_tag
        run: |
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "$GITHUB_SHA" | cut -c1-7)
            else
              BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's|refs/heads/||' | tr '/' '-')
              SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-7)
              VERSION="${BRANCH_NAME}-${SHORT_SHA}"
            fi
            echo "Using tag: $VERSION"
            echo "tag=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Backend1 Image
        if: needs.detect_changes.outputs.backend1 == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./backend1
          file: ./backend1/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/blog-backend1:${{ steps.get_tag.outputs.tag }}
            ${{ github.ref == 'refs/heads/main' && format('{0}/blog-backend1:latest', secrets.DOCKER_USERNAME) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: v0.64.1

      - name: Download Trivy HTML template
        run: curl -sSL -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Run Trivy HTML Scan
        run: |
          trivy image --format template --template @html.tpl \
            -o backend1-trivy-report.html \
            docker.io/${{ secrets.DOCKER_USERNAME }}/blog-backend1:${{ steps.get_tag.outputs.tag }} 

      - name: Upload Trivy HTML report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-backend1
          path: backend1-trivy-report.html

      - name: Build and Push Backend2 Image
        if: needs.detect_changes.outputs.backend2 == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./backend2
          file: ./backend2/Dockerfile
          push: true
          tags: | 
            ${{ secrets.DOCKER_USERNAME }}/blog-backend2:${{ steps.get_tag.outputs.tag }}
            ${{ github.ref == 'refs/heads/main' && format('{0}/blog-backend2:latest', secrets.DOCKER_USERNAME) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: v0.64.1

      - name: Download Trivy HTML template
        run: curl -sSL -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Run Trivy HTML Scan
        run: |
          trivy image --format template --template @html.tpl \
            -o backend2-trivy-report.html \
            docker.io/${{ secrets.DOCKER_USERNAME }}/blog-backend2:${{ steps.get_tag.outputs.tag }}

      - name: Upload Trivy HTML report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-backend2
          path: backend2-trivy-report.html

  build_and_push_frontend:
    needs: detect_changes
    if: needs.detect_changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'PRODUCTION' || 'DEVELOPMENT' }}
    outputs:
      docker_tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "$GITHUB_SHA" | cut -c1-7)
          else
            BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's|refs/heads/||' | tr '/' '-')
            SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-7)
            VERSION="${BRANCH_NAME}-${SHORT_SHA}"
          fi
          echo "Using tag: $VERSION"
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: | 
            ${{ secrets.DOCKER_USERNAME }}/blog-frontend:${{ steps.get_tag.outputs.tag }}
            ${{ github.ref == 'refs/heads/main' && format('{0}/blog-frontend:latest', secrets.DOCKER_USERNAME) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Debug tag
        run: echo "Tag is ${{ steps.get_tag.outputs.tag }}"
      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: v0.64.1

      - name: Download Trivy HTML template
        run: curl -sSL -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Run Trivy HTML Scan
        run: |
          trivy image --format template --template @html.tpl \
            -o frontend-trivy-report.html \
            docker.io/${{ secrets.DOCKER_USERNAME }}/blog-frontend:${{ steps.get_tag.outputs.tag }}

      - name: Upload Trivy HTML report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-frontend
          path: frontend-trivy-report.html

  upload_trivy_reports:
    needs: 
      - detect_changes
      - build_and_push_frontend
      - build_and_push_backend
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: mkdir -p gh-pages/trivy-report

      - uses: actions/download-artifact@v4
        with:
          pattern: trivy-report-*
          path: artifacts

      - run: mkdir -p gh-pages/trivy-report

      - if: needs.detect_changes.outputs.backend1 == 'true'
        run: |
          mkdir -p gh-pages/trivy-report/backend1
          cp artifacts/trivy-report-backend1/backend1-trivy-report.html gh-pages/trivy-report/backend1/index.html

      - if: needs.detect_changes.outputs.backend2 == 'true'
        run: |
          mkdir -p gh-pages/trivy-report/backend2
          cp artifacts/trivy-report-backend2/backend2-trivy-report.html gh-pages/trivy-report/backend2/index.html

      - if: needs.detect_changes.outputs.frontend == 'true'
        run: |
          mkdir -p gh-pages/trivy-report/frontend
          cp artifacts/trivy-report-frontend/frontend-trivy-report.html gh-pages/trivy-report/frontend/index.html

      - name: Commit and push Trivy reports
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin reports || true
          git switch reports || git switch --orphan reports
          cp -r gh-pages/* .
          git add trivy-report
          git commit -m "chore(report): update trivy reports on ${{ github.sha }}" || echo "No changes"
          git push origin reports


  deploy-frontend-to-reports:
    needs:
      - detect_changes
      - build_and_push_frontend
    if: needs.detect_changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: yarn
          cache-dependency-path: frontend/yarn.lock
      - name: Install dependencies
        run: |
          cd frontend
          yarn install --frozen-lockfile
      - name: Build frontend
        env:
          VITE_BASE_PATH: /blog-demo/frontend/
        run: |
          cd frontend
          yarn build
      - name: Copy frontend build to gh-pages
        run: |
          mkdir -p gh-pages/frontend
          cp -r frontend/dist/* gh-pages/frontend/
      - name: Push frontend to reports branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin reports || true
          git switch reports || git switch --orphan reports
          rm -rf frontend
          mkdir -p frontend
          cp -r gh-pages/frontend/* frontend/
          git add frontend
          git commit -m "feat(frontend): publish frontend build on reports branch at ${{ github.sha }}" || echo "No changes"
          git push origin reports

  deploy_frontend:
    needs:
      - build_and_push_frontend
      - detect_changes

    runs-on: frontend
    if: needs.detect_changes.outputs.frontend == 'true'

    steps:
      - name: SSH and deploy
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/shrijana/prod
            docker compose pull frontend
            docker compose --profile frontend up -d

  deploy_backend1:
    needs:
      - build_and_push_backend
      - detect_changes

    runs-on: backend
    if: needs.detect_changes.outputs.backend1 == 'true'

    steps:
      - name: SSH and deploy
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/shrijana/prod
            docker compose pull backend1
            docker compose --profile backend1 up -d

  deploy_backend2:
    needs:
      - build_and_push_backend
      - detect_changes

    runs-on: backend
    if: needs.detect_changes.outputs.backend2 == 'true'

    steps:
      - name: SSH and deploy
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/shrijana/prod
            docker compose pull backend2
            docker compose --profile backend2 up -d